EX1:
#include <stdio.h>

int main()
{
        int *p, i;

        p = (int *) calloc(5, sizeof(int));
        for(i = 0; i < 5; i++)
        {
            printf("Insira um numero para ser armazenado no array (numero %i de 5): ", i + 1);
            scanf("%i", (p + i));
        }

        for(i = 0; i < 5; i++)
        {
            printf("Numero %i: %i\n", i + 1, (*(p + i)));
        }

        free(p);
}

EX2:
#include <stdio.h>

int main()
{
        int *p, n, i;

        printf("Insira o numero que sera o tamanho do vetor: ");
        scanf("%i", &n);

        p = (int *) calloc(n, sizeof(int));

        if(p == NULL)
        {
            printf("Memoria insuficiente");
            return 1;
        }

        for(i = 0; i < n; i++)
        {
            printf("Insira um numero (numero %i de %i): ", i + 1, n);
            scanf("%i", (p + i));
        }

        for(i = 0; i < n; i++)
        {
            printf("Numero %i: %i\n", i + 1, (*(p + i)));
        }

        free(p);

        return 0;
}

EX3
#include <stdio.h>

void par_impar(int*p, int n, int*par, int*impar);

int main()
{
    int n, *p, i, par = 0, impar = 0;

    printf("Insira o tamanho do vetor que voce deseja armazenar: ");
    scanf("%i", &n);

    p = (int*) calloc(n,sizeof(int));
    if(p == NULL)
    {
        printf("Memoria insuficiente");
        return 1;
    }

    for(i = 0; i <n; i++)
    {
        printf("Insira um numero no vetor (numero %i de %i): ", i + 1, n);
        scanf("%i", &p[i]);
    }

    par_impar(p, n, &par, &impar);

    printf("%i %i", par, impar);

    free(p);

    return 0;
}

void par_impar(int*p, int n, int*par, int*impar)
{
    int i;
    for(i =0; i < n; i++)
    {
        if(((p[i]) % 2) == 0)
        {
            (*(par))++;
        }
        else
        {
            (*(impar))++;
        }
    }
}

EX4:
#include <stdio.h>
#include <stdlib.h>

void tira_vogal(char *p, int n);

char main()
{
    int n, i;
    char *s;
    printf("Insira o tamanho da sua string: \n");
    scanf("%i", &n);

    s = (char*) calloc(n, sizeof(char));

    printf("Insira a sua string: ");
    setbuf(stdin, NULL);
    fgets((s), n, stdin);

    tira_vogal(s, n);

    printf("A sua string sem vogal eh: %s",s);
}
void tira_vogal(char *p, int n)
{
    int i, j;
    for(i = 0; i < n; i++)
    {
        if((p[i] == 'a') || (p[i] == 'A') || (p[i] == 'e') || (p[i] == 'E') || (p[i] == 'i') || (p[i] == 'I') || (p[i] == 'o') || (p[i] == 'O') || (p[i] == 'u') || (p[i] == 'U'))
        {
            for(j = i; j < n; j++)
            {
                p[j] = p[j + 1];
            }
            i--;
        }
    }
}

EX5:
#include <stdio.h>
#include <stdlib.h>

void mult(int * p, int n, int x);


int main()
{
    int N, *vet, X, i;

    printf("Insira o tamanho do seu vetor: \n");
    scanf("%i", &N);

    vet = (int *) calloc(N, sizeof(int));
    if(vet == NULL)
    {
        printf("Sem memória");
        exit(1);
    }

    for(i = 0; i < N; i++)
    {
        printf("Insira um valor para ser armazenado no vetor (valor %i de %i): ", i + 1, N);
        scanf("%i", &vet[i]);
    }

    printf("\n\nInsira um numero que voce deseja procurar os multiplos: ");
    scanf("%i", &X);

    mult(vet, N, X);
    return 0;
}

void mult(int * p, int n, int x)
{
    int i;
    for(i = 0; i < n; i++)
    {
        if((p[i] % x) == 0)
        {
            printf("Multiplo: %i\n", p[i]);
        }
    }
}
EX 6:
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int *mem, i, n, esc, pos, num;

    printf("Insira o tamanho da memoria: \n");
    scanf("%i", &n);

    mem = (int *) calloc(n, sizeof(int));
    if(mem == NULL)
    {
        printf("Sem memoria");
        exit(1);
    }


    do
    {
        printf("Escolha uma opcao: \n");
        printf("(1) - Escrever um valor em uma posicao\n");
        printf("(2) - Ler um valor em uma posicao\n");
        printf("(3) - Sair\n");
        scanf("%i", &esc);

        if((esc < 1) || (esc > 3))
        {
            printf("Escolha invalida");
        }

        switch(esc)
        {
        case 1:
        es:
            printf("Escreva a posicao que deseja escrever o valor: ");
            scanf("%i", &pos);
            if((pos < 0) || (pos > n))
            {
                printf("Posicao invalida\n\n");
                goto es;
            }
            printf("Insira o valor: ");
            scanf("%i", (mem + pos));
            break;
        case 2:
            c2:
            printf("Escreva a posicao que deseja ler o valor: ");
            scanf("%i", &pos);
            if((pos < 0) || (pos > n))
            {
                printf("Posicao invalida\n\n");
                goto c2;
            }
            printf("Valor : %i\n", (*(mem + pos)));
            break;
        }

    }while(esc != 3);
    return 0;
}

EX 7:
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void bilhete(int *p, int n);

int main()
{
    int lot[6], cli[6], i, j, quant = 0, *p, k =0;
    srand(time(NULL));

    bilhete(lot, 6);
    bilhete(cli, 6);
    for(i = 0; i < 6; i++)
    {
        printf("%i ", cli[i]);
    }
    printf("\n\n");

    for(i = 0; i < 6; i++)
    {
        for(j = 0; j < 6; j++)
        {
            if((cli[i]) == (lot[j]))
            {
                quant++;
                break;
            }
        }
    }

    p = (int *) calloc(quant, sizeof(int));

    if(p != NULL)
    {
        for(i = 0; i < 6; i++)
        {
            for(j = 0; j < 6; j++)
            {
                if((cli[i]) == (lot[j]))
                {
                    (*(p + k)) = (*(cli + i));
                    k++;
                    break;
                }
            }
        }
    }

    printf("Numeros sorteados pela loteria: \n");
    for(i = 0; i < 6; i++)
    {
        printf("%i ", lot[i]);
    }
    printf("\nNumeros acertados:\n");
    if(p == NULL)
    {
        printf("Não houve acertos");
        exit(1);
    }

    for(i = 0; i < quant; i++)
    {
        printf("%i ", p[i]);
    }
    return 0;
}

void bilhete(int *p, int n)
{
    int i, j;
    for(i = 0; i < n; i++)
    {
        (*(p + i)) = (rand() % 100);
        for( j = 0; j < i; j++)
        {
            if((*(p + i)) == (*(p + j)))
            {
                srand(time(NULL));
                (*(p + i)) = (rand() % 100);
                j = 0;
            }
        }
    }
}

EX8:
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int * vet, zer = 0, i;

    vet = (int *) calloc(1500, sizeof(int));
    if(vet == NULL)
    {
        printf("Sem memória");
        exit(1);
    }

    for(i = 0; i < 1500; i++)
    {
        if(vet[i] == 0)
        {
            zer++;
        }
    }

    printf("Ha %i zeros\n", zer);

    //b
    for(i = 0; i < 1500; i++)
    {
        vet[i] = i;
    }

    //c
    printf("Primeiros 10 numeros: ");
    for(i = 0; i < 10; i++)
    {
        printf("%i ", vet[i]);
    }

    printf("\nUltimos 10 numeros: ");
    for(i = 1489; i < 1500; i++)
    {
        printf("%i ", vet[i]);
    }
}


EX 9:
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int i, * vet, n, quant = 0;
    printf("Insira  o tamanho do vetor que deseja gerar: \n");
    scanf("%i", &n);

    vet = (int *) calloc(n, sizeof(int));

    for(i = 0; i < n; i++)
    {
        printf("Insira um numero para ser armazenado no vetor(se for negativo ele parará de armazenar): ");
        scanf("%i", &vet[i]);

        if(vet[i] < 0)
        {
            break;
        }
        quant++;
    }

    vet = realloc(vet, quant * sizeof(int));

    printf("Vetor: ");

    for(i = 0; i < quant; i++)
    {
        printf("%i ", vet[i]);
    }
    return 0;
}

EX 10:
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main()
{
    int n, i;
    double *vet;
    srand(time(NULL));

    do
    {
        printf("Insira quantos numeros voce deseja armazenar (precisa ser maior ou igual a 10) \n");
        scanf("%i", &n);
        if(n < 10)
        {
            printf("Numero muito pequeno.\n\n");
        }
    }while(n < 10);

    vet = (double *) malloc(n * sizeof(double));

    for(i = 0; i < n; i++)
    {
        vet[i] = (rand() % 101);
    }

    printf("Valores do vetor: \n");
    for(i = 0; i < n; i++)
    {
        printf("%lf ", vet[i]);
    }
    return 0;
}

EX 11:
#include <stdio.h>

struct aluno
{
    int mat;
    char sobrenome[50];
    int ano;
};

typedef struct aluno aluno;

int main()
{
    int n, i;
    aluno *vet;

    do
    {
        printf("Insira quantos alunos voce deseja armazenar: ");
        scanf("%i", &n);

        if(n <= 0)
        {
            printf("Quantidade de alunos muito pequena\n\n");
        }
    }while(n <= 0);

    vet = (aluno *) calloc(n, sizeof(aluno));

    for(i = 0; i < n; i++)
    {
        printf("Insira o sobrenome do aluno: ");
        setbuf(stdin, NULL);
        fgets(vet[i].sobrenome, 50, stdin);

        printf("\nInsira a matricula do aluno: ");
        scanf("%i", &(vet[i].mat));

        printf("\nInsira o ano de nascimento do aluno: ");
        scanf("%i", &(vet[i].ano));
        printf("\n");
    }
    printf("\n\n\n");
    for(i = 0; i < n; i++)
    {
        printf("Aluno %i de %i:\n", i + 1, n);
        printf("Nome: %s\n", ((vet + i) -> sobrenome));

        printf("Matricula %d\n", ((vet + i) -> mat));

        printf("Ano de nascimento: %d\n", ((vet + i) -> ano));
        printf("\n\n");
    }
    return 0;
}

EX 12:
#include <stdio.h>

struct produto
{
    int id;
    char nome[50];
    int est;
    float preco;
};

int main()
{
    int i, n, pre_mai, est_mai;
    struct produto *vet;

    do
    {
        printf("Insira quantos produtos voce deseja registrar (maior que 0): ");
        scanf("%i", &n);
        if(n <= 0)
        {
            printf("numero muito pequeno.\n\n");
        }
    }while(n <= 0);

    vet = (struct produto *) calloc(n, sizeof(struct produto));

    for(i = 0; i < n; i++)
    {
        printf("Produto %i de %i\n", i+ 1, n);

        printf("Insira o id do produto: ");
        scanf("%i", &vet[i].id);

        printf("Insira o nome do produto: ");
        setbuf(stdin, NULL);
        fgets(vet[i].nome, 50, stdin);

        printf("Insira quantos desses produtos ha no estoque: ");
        scanf("%i", &vet[i].est);

        printf("Insira o preco do produto: ");
        scanf("%f", &vet[i].preco);

        if(i != (n - 1))
        {
            printf("\n\n");
        }
    }

    for(i = 0; i < n; i++)
    {
        if(i == 0)
        {
            est_mai = 0;
            pre_mai = 0;
        }

        if(vet[est_mai].est < vet[i].est)
        {
            est_mai = i;
        }

        if(vet[pre_mai].preco < vet[i].preco)
        {
            pre_mai = i;
        }
    }

    printf("\n\nProduto com maior estoque:\nId: %i\nNome: %s\nEstoque: %i\nPreco: %f\n\n", vet[est_mai].id,vet[est_mai].nome,vet[est_mai].est,vet[est_mai].preco);
    printf("Produto com maior preco:\nId: %i\nNome: %s\nEstoque: %i\nPreco: %f", vet[pre_mai].id,vet[pre_mai].nome,vet[pre_mai].est,vet[pre_mai].preco);
    return 0;
    }

EX 13:

